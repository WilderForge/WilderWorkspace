import org.apache.tools.ant.filters.ReplaceTokens

// Define file extensions for token replacement. You can add additional file types to replace tokens in.
def tokenReplaceExtensions = ['.java', '.json']

// Define all tokens and their replacements as a map
def replacementTokens = [
	workspaceVersion: project.version,
    providerVersion: libs.versions.provider.version.get(),
    fabricLoaderVersion: libs.versions.fabric.loader.version.get(),
    
    //dependencies for building and running WilderWorkspace gradle plugin itself
    commonsIOVersion: libs.versions.commons.io.version.get(),
    commonsLangVersion: libs.versions.commons.Lang.version.get(),
    commonsTextVersion: libs.versions.commons.Text.version.get(),
    vineFlowerVersion: libs.versions.vineflower.version.get(),
    loomVersion: libs.versions.fabric.Loom.version.get(),
    gsonVersion: libs.versions.gson.version.get(),
    
    //transitive dependencies
    log4jVersion: libs.versions.log4j.version.get()
]

task replaceTokensInResources(type: Copy) {
    doFirst {
        delete "$buildDir/processedResources"
    }
    from(sourceSets.main.resources.srcDirs) {
        // Only include files matching the defined extensions
        include { file -> tokenReplaceExtensions.any { file.name.endsWith(it) } }
        // Apply token replacement using the predefined variable
        filter(ReplaceTokens, tokens: replacementTokens)
    }
    from(sourceSets.main.resources.srcDirs) {
        // Ensure non-text files are passed through untouched
        exclude { file -> tokenReplaceExtensions.any { file.name.endsWith(it) } }
    }
    into("$buildDir/processedResources")
    
    inputs.files(sourceSets.main.resources.srcDirs)
    outputs.dir("$buildDir/processedResources")
}

task replaceTokensInSource(type: Copy) {
    doFirst {
    	delete "$buildDir/processedSrc"
        project.logger.lifecycle("Starting file iteration in source files")
        project.logger.lifecycle("Source directories being used: ${sourceSets.main.java.srcDirs}")
    }

    from(sourceSets.main.java.srcDirs) {
        include '**/*'

        eachFile { file ->
            def matchesExtension = tokenReplaceExtensions.any { file.name.endsWith(it) }
            project.logger.lifecycle("found file " + file)
        }

        filter(ReplaceTokens, tokens: replacementTokens)
    }

    into("$buildDir/processedSrc")

    doLast {
        project.logger.lifecycle("File iteration and token replacement complete")
    }
}

gradle.taskGraph.whenReady { taskGraph ->
    replaceTokensInSource.outputs.upToDateWhen { false }
    replaceTokensInResources.outputs.upToDateWhen { false }
}


sourceSets {
    processed {
    	resources.srcDirs = ["$buildDir/processedResources"]
        java.srcDirs = ["$buildDir/processedSrc"]
    }
    build {
    	java.srcDirs = sourceSets.main.java.srcDirs + sourceSets.processed.java.srcDirs
        resources.srcDirs = sourceSets.main.resources.srcDirs + sourceSets.processed.resources.srcDirs
    }
}

configurations {
    resolvedCompileOnly {
        extendsFrom compileOnly
    }
}

processResources {
    dependsOn replaceTokensInResources
    from(sourceSets.processed.resources)
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

compileJava {
	dependsOn replaceTokensInResources
    source = replaceTokensInSource.outputs
    classpath -= sourceSets.main.resources
    classpath += sourceSets.processed.resources
}

task sourceJar(type: Jar) {
    from sourceSets.processed.allSource
    archiveClassifier.set('sources')
    destinationDirectory.set(file("$buildDir/libs"))
    dependsOn replaceTokensInSource, replaceTokensInResources
}
build.dependsOn(sourceJar)

eclipse {
    classpath {
    	sourceSets -= [sourceSets.processed, sourceSets.build]
    }
}
