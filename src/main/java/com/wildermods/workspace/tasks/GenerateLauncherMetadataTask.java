package com.wildermods.workspace.tasks;

import java.io.File;
import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.StandardOpenOption;
import java.util.ArrayList;
import java.util.List;

import javax.inject.Inject;

import org.gradle.api.DefaultTask;
import org.gradle.api.artifacts.repositories.ArtifactRepository;
import org.gradle.api.artifacts.repositories.MavenArtifactRepository;
import org.gradle.api.file.ConfigurableFileCollection;
import org.gradle.api.tasks.OutputFiles;
import org.gradle.api.tasks.TaskAction;

public abstract class GenerateLauncherMetadataTask extends DefaultTask {

	@OutputFiles
	public abstract ConfigurableFileCollection getOutputFiles();
	
	@Inject
	public GenerateLauncherMetadataTask() { //https://docs.gradle.org/current/javadoc/org/gradle/api/Project.html#files(java.lang.Object...)
		getOutputFiles().from("gradle/libs.repositories.toml");
	}
	
	@TaskAction
	public void generate() throws IOException {
		List<String> lines = new ArrayList<>();
		lines.add("#This file is automatically generated by WilderWorkspace. It should not be modified directly.");
		lines.add("#Instead, you should add or remove repositories in the buildscript block of your 'build.gradle' file.");
		lines.add("#This file is included in your mod jar so multimyth knows how to download dependencies for your mod.");
		lines.add("");
		lines.add("[Repositories]");
		
		for(ArtifactRepository repo : getProject().getRepositories()) {
			if (repo instanceof MavenArtifactRepository) {
				MavenArtifactRepository mavenRepo = (MavenArtifactRepository) repo;
				String name = mavenRepo.getName();
				String url = mavenRepo.getUrl().toString();
				
				if(url.startsWith("file:/")) {
					if(name.startsWith("MavenLocal")) {
						lines.add(name + " = { method = \"mavenLocal\" }" );
					}
					else {
						lines.add(name + " = { method = \"maven\", arg = \"" + url + "\" }");
					}
					continue;
				}
				
				lines.add(name + " = { url = \"" + url + "\" }");
			}
			else {
				getLogger().warn("Skipping unsupported repository type: " + repo.getClass().getCanonicalName());
			}
		}
		
		File output = getProject().file("gradle/libs.repositories.toml");
		output.getParentFile().mkdirs();
		Files.write(output.toPath(), lines, Charset.forName("ASCII"), StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING);
		getLogger().lifecycle("Generated " + output.getAbsolutePath());
		
	}
	
}
